// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { isFunction } from '@polkadot/util';
import { combineLatest, of } from '@polkadot/x-rxjs';
import { map, switchMap } from '@polkadot/x-rxjs/operators';
import { memo } from "../util/index.mjs";

function calcBalances(api, [accountId, [freeBalance, reservedBalance, frozenFee, frozenMisc, accountNonce]]) {
  return {
    accountId,
    accountNonce,
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance: api.registry.createType('Balance', freeBalance.toBn())
  };
} // old


function queryBalancesFree(api, accountId) {
  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [freeBalance, reservedBalance, api.registry.createType('Balance'), api.registry.createType('Balance'), accountNonce]));
}

function queryBalancesAccount(api, accountId) {
  return api.queryMulti([[api.query.balances.account, accountId], [api.query.system.accountNonce, accountId]]).pipe(map(([{
    feeFrozen,
    free,
    miscFrozen,
    reserved
  }, accountNonce]) => [free, reserved, feeFrozen, miscFrozen, accountNonce]));
}

function queryCurrent(api, accountId) {
  // AccountInfo is current, support old, eg. Edgeware
  return api.query.system.account(accountId).pipe(map(infoOrTuple => {
    const {
      feeFrozen,
      free,
      miscFrozen,
      reserved
    } = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const accountNonce = infoOrTuple.nonce || infoOrTuple[0];
    return [free, reserved, feeFrozen, miscFrozen, accountNonce];
  }));
}
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */


export function account(instanceId, api) {
  return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => accountId ? combineLatest([of(accountId), isFunction(api.query.system.account) ? queryCurrent(api, accountId) : isFunction(api.query.balances.account) ? queryBalancesAccount(api, accountId) : queryBalancesFree(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Balance'), api.registry.createType('Index')]])), map(result => calcBalances(api, result))));
}