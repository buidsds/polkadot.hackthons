import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classPrivateFieldLooseBase from "@babel/runtime/helpers/esm/classPrivateFieldLooseBase";
import _classPrivateFieldLooseKey from "@babel/runtime/helpers/esm/classPrivateFieldLooseKey";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { Struct } from '@polkadot/types';
import runtimeTypes from '@polkadot/types/interfaces/runtime/definitions';
import { extractAuthor } from "./util.mjs"; // We can ignore the properties, added via Struct.with

const _SignedBlock = Struct.with(runtimeTypes.types.SignedBlock);
/**
 * @name SignedBlockExtended
 * @description
 * A [[Block]] header with an additional `author` field that indicates the block author
 */


var _author = _classPrivateFieldLooseKey("author");

export class SignedBlockExtended extends _SignedBlock {
  constructor(registry, block, sessionValidators) {
    super(registry, block);
    Object.defineProperty(this, _author, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldLooseBase(this, _author)[_author] = extractAuthor(this.block.header.digest, sessionValidators);
  }
  /**
   * @description Convenience method, returns the author for the block
   */


  get author() {
    return _classPrivateFieldLooseBase(this, _author)[_author];
  }
  /**
   * @description Creates a human-friendly JSON representation
   */


  toHuman(isExtended) {
    return _objectSpread(_objectSpread({}, super.toHuman(isExtended)), {}, {
      author: this.author ? this.author.toHuman() : undefined
    });
  }
  /**
   * @description Creates the JSON representation
   */


  toJSON() {
    return _objectSpread(_objectSpread({}, super.toJSON()), {}, {
      author: this.author ? this.author.toJSON() : undefined
    });
  }

}